/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static basiclibrary.Library.*;
import static org.junit.Assert.*;

public class LibraryTest {

    //Test roll method
    @Test
    public void testRoll() {
        int[] values = new int[]{1,2,3,4};
        assertEquals("array length should be the same", values.length, roll(4).length);
    }

    //Test if value is zero
    @Test (expected = IllegalArgumentException.class)
    public void testRollZeroN() {
        roll(0);
    }

    //Test if value is negative
    @Test (expected = IllegalArgumentException.class)
    public void testRollNegativeN() {
        roll(-1);
    }

    //Test containsDuplicates Method

    //Test if array is null
    @Test (expected = IllegalArgumentException.class)
    public void testContainsDuplicatesEmptyArray() {
        containsDuplicates(null);
    }

    //Test if there are no duplicates
    @Test
    public void testContainsDuplicateUniqueArray() {
        int[] testArray = new int[]{1,2,3,4,5};
        assertFalse("Unique values should return false.", containsDuplicates(testArray));
    }

    //Test if there are duplicates
    @Test
    public void testContainsDuplicatesDuplicateArray() {
        int[] testArray = new int[]{1,2,3,4,1};
        assertTrue("Duplicated values should return false.", containsDuplicates(testArray));
    }

    //Test if there is only one value
    @Test
    public void testContainsDuplicatesOneValueArray() {
        int[] testArray = new int[]{5};
        assertFalse("Duplicated values should return false.", containsDuplicates(testArray));
    }

    //Test calculateAverage method

    //Test if there is only one value
    @Test
    public void testCalculateAverageOneValueArray() {
        int[] testArray = new int[]{5};
        assertEquals("Average should be the same as the value.", 5,
                calculateAverage(testArray), 0);
    }

    //Test average
    @Test
    public void testCalculateAverageArray() {
        int[] testArray = new int[]{2,4,5,7};
        assertEquals("Average should be correctly calculated.", 4.5,
                calculateAverage(testArray), 0.01);
    }

    //Test average with zero value
    @Test
    public void testCalculateAverageArrayWithZero() {
        int[] testArray = new int[]{0,4,5,7};
        assertEquals("Average should be correctly calculated.", 4.0,
                calculateAverage(testArray), 0.01);
    }

    //Test average with zero value
    @Test
    public void testCalculateAverageArrayZero() {
        int[] testArray = new int[]{0};
        assertEquals("Average should be correctly calculated.", 0,
                calculateAverage(testArray), 0.01);
    }

    //Test if array is null
    @Test (expected = IllegalArgumentException.class)
    public void testCalculateAverageEmptyArray() {
        containsDuplicates(null);
    }

    // Test for calculateArraysAverage

    //Test if array is null
    @Test (expected = IllegalArgumentException.class)
    public void testCalculateArraysAverageEmptyArray() {
        calculateArraysAverage(null);
    }

    //Test average with zero value
    @Test
    public void testCalculateArraysAverage() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        assertEquals("Average should be correctly calculated.", 57,
                calculateArraysAverage(weeklyMonthTemperatures), 0.01);
    }

    //Test average with duplicate minimum value
    @Test
    public void testCalculateArraysAverageOne() {
        int[][] weeklyMonthTemperatures = {
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
        };
        assertEquals("Average should be correctly calculated.", 1,
                calculateArraysAverage(weeklyMonthTemperatures), 0.01);
    }

    // Test for the analyzeWeather method
    @Test
    public void testAnalyzeWeather() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };


        assertEquals("Method should display unseen temperatures.", "Never saw temperature: 63 67 68 69 ",
                analyzeWeather(weeklyMonthTemperatures));

    }

    // Test for the analyzeWeather method
    @Test
    public void testAnalyzeWeatherOneValue() {
        int[][] weeklyMonthTemperatures = {
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1},
        };


        assertEquals("Method should display unseen temperatures.", "Never saw temperature: ",
                analyzeWeather(weeklyMonthTemperatures));

    }

    // Test for the analyzeWeather method
    @Test
    public void testTally() {
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");


        assertEquals("Method should display the winner.", "Bush",
                tally(votes));

    }

    // Test for the analyzeWeather method when empty
    @Test
    public void testTallyEmpty() {
        List<String> votes = new ArrayList<>();
        assertEquals("Method should display the winner.", "",
                tally(votes));

    }




    //TODO
    //test if the array is empty
    //test if the generated random numbers in roll
    //test if values are zero



}

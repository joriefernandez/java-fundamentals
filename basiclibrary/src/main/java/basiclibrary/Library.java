/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import jdk.swing.interop.SwingInterOpUtils;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class Library {
    private static final int MIN_NUMBER = 1;
    private static final int MAX_NUMBER = 6;


    /**
     * Function to fill out array by rolling six-sided dice.
     * @param n number of times the dice will be rolled
     * @return resulting array with values of rolled dice
     */
    public static int[] roll (int n){
        //Check if n is valid
        if(n <= 0){
            throw new IllegalArgumentException("Number of times should be greater than zero.");
        }
        //result array
        int[] result = new int[n];
        //Loop through the result array and insert random value from 1-6
        for(int index = 0; index < result.length; index++){
            result[index] = (int)(MIN_NUMBER + Math.random() * MAX_NUMBER);
        }

        //return result array
        return result;
    }

    /**
     * Method to check if array has duplicates.
     * @param inputArray array to be checked
     * @return true: there is a duplicate value
     *         false: no duplicates found
     */
    public static boolean containsDuplicates(int[] inputArray){
        //Check if array is null. If so, throw error message
        checkNullArray(inputArray);
        //Sort array
        Arrays.sort(inputArray);
        //initialize previous value to first array element
        int prev = inputArray[0];

        //Loop through the array to check if there is a duplicated value
        for(int index = 1; index < inputArray.length; index++){
            //Check if current element is the same as previous. If so, return true.
            if(prev == inputArray[index]){
                return true;
            }
        }

        //return false if no duplicate found
        return false;
    }

    /**
     * Method to compute the average of array values.
     * @param inputArray contains the values to be computed
     * @return average of the array values
     */
    public static double calculateAverage(int[] inputArray){
        //Check if array is null. If so, throw error message
        checkNullArray(inputArray);
        //sum
        double sum = 0;

        //Loop through array to calculate sum
        for(int index = 0; index < inputArray.length; index++){
            sum += inputArray[index];
        }


        //return average
        return sum/inputArray.length;
    }


    /**
     * method to return the minimum average in the array
     * @param inputArray array of array values
     * @return the lowest average
     */
    public static double calculateArraysAverage(int[][] inputArray){
        //Check if array is null. If so, throw error message
        if(inputArray == null){
            throw new IllegalArgumentException("Arrays are null.");
        }
        //Initialize minimum average
        double minAverage = Integer.MAX_VALUE;

        //Loop through the array and compute each array average
        for(int index = 0; index < inputArray.length; index++){
            //Check minimum value
            minAverage = Math.min(minAverage, calculateAverage(inputArray[index]));
        }

        return minAverage;
    }

    /**
     * Function to determine which temperatures are not in the list
     * @param input 2d-array with the monthly temperatures
     * @return string that contains all unseen temperatures
     */
    public static String analyzeWeather(int[][] input){
        //Set to contains all unique temperatures
        HashSet<Integer> set = copyToHashSet(input);

        // Result
        StringBuilder result = new StringBuilder("Never saw temperature: ");
        // Maximum temperature
        int max = findMaximum(set);

        //Minimum temperature
        int min = findMinimum(set);

        //Iterate between the min and max and check if the current temperature
        // is not in the set.
        for(int temp = min; temp <= max; temp++){
            if(!(set.contains(temp))){
                result.append(temp);
                result.append(" ");
            }
        }
        //return result
        return result.toString();
    }

    /**
     * Function to return who got the most number of votes
     * @param votes list of voted names
     * @return winner with most votes
     */
    public static String tally(List<String> votes) {
        HashMap<String, Integer> map = copyVotes(votes);
        String winner="";
        int totalVotes = -1;

        for (HashMap.Entry<String, Integer> entry : map.entrySet()){
            if (totalVotes < entry.getValue()) {
                totalVotes = entry.getValue();
                winner = entry.getKey();
            }
        }

        return winner;
    }


    //Helper to check if array is null
    private static void checkNullArray(int[] inputArray){
        //Check if array is null. If so, throw error message
        if(inputArray == null){
            throw new IllegalArgumentException("Array is null.");
        }
    }


    //Helper method to find maximum value
    private static int findMaximum(HashSet<Integer> theSet){
        int maxValue = Integer.MIN_VALUE;

        for(Integer cur: theSet) {
            maxValue = Math.max(maxValue, cur);
        }

        return maxValue;

    }
    //Helper method to find minimum value
    private static int findMinimum(HashSet<Integer> theSet){
        int minValue = Integer.MAX_VALUE;
        for(Integer cur: theSet) {
            minValue = Math.min(minValue, cur);
        }
        return minValue;

    }

    //Helper method to copy array to hashset
    private static HashSet<Integer> copyToHashSet(int[][] input){
        HashSet<Integer> set = new HashSet<>();
        for(int index = 0; index < input.length; index++) {
            for(int j = 0; j < input[index].length; j++){
                set.add(input[index][j]);
            }
        }
        return set;
    }

    //Helper method to copy list to hashmap
    private static HashMap<String, Integer> copyVotes(List<String> theVotes){
        HashMap<String, Integer> theMap = new HashMap<>();
        for(String str: theVotes){
            if(theMap.containsKey(str)){
                theMap.put(str, (theMap.get(str) + 1));
            } else{
                theMap.put(str, 1);
            }
        }

        return theMap;
    }
}

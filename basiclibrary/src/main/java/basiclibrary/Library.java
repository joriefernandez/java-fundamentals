/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;

public class Library {
    private static final int MIN_NUMBER = 1;
    private static final int MAX_NUMBER = 6;


    /**
     * Function to fill out array by rolling six-sided dice.
     * @param n number of times the dice will be rolled
     * @return resulting array with values of rolled dice
     */
    public static int[] roll (int n){
        //Check if n is valid
        if(n <= 0){
            throw new IllegalArgumentException("Number of times should be greater than zero.");
        }
        //result array
        int[] result = new int[n];
        //Loop through the result array and insert random value from 1-6
        for(int index = 0; index < result.length; index++){
            result[index] = (int)(MIN_NUMBER + Math.random() * MAX_NUMBER);
        }

        //return result array
        return result;
    }

    /**
     * Method to check if array has duplicates.
     * @param inputArray array to be checked
     * @return true: there is a duplicate value
     *         false: no duplicates found
     */
    public static boolean containsDuplicates(int[] inputArray){
        //Check if array is null. If so, throw error message
        checkNullArray(inputArray);
        //Sort array
        Arrays.sort(inputArray);
        //initialize previous value to first array element
        int prev = inputArray[0];

        //Loop through the array to check if there is a duplicated value
        for(int index = 1; index < inputArray.length; index++){
            //Check if current element is the same as previous. If so, return true.
            if(prev == inputArray[index]){
                return true;
            }
        }

        //return false if no duplicate found
        return false;
    }

    /**
     * Method to compute the average of array values.
     * @param inputArray contains the values to be computed
     * @return average of the array values
     */
    public static double calculateAverage(int[] inputArray){
        //Check if array is null. If so, throw error message
        checkNullArray(inputArray);
        //sum
        double sum = 0;

        //Loop through array to calculate sum
        for(int index = 0; index < inputArray.length; index++){
            sum += inputArray[index];
        }


        //return average
        return sum/inputArray.length;
    }


    /**
     * method to return the minimum average in the array
     * @param inputArray array of array values
     * @return the lowest average
     */
    public static double calculateArraysAverage(int[][] inputArray){
        //Check if array is null. If so, throw error message
        if(inputArray == null){
            throw new IllegalArgumentException("Arrays are null.");
        }
        //Initialize minimum average
        double minAverage = Integer.MAX_VALUE;

        //Loop through the array and compute each array average
        for(int index = 0; index < inputArray.length; index++){
            //Check minimum value
            minAverage = Math.min(minAverage, calculateAverage(inputArray[index]));
        }

        return minAverage;
    }


    //Helper to check if array is null
    private static void checkNullArray(int[] inputArray){
        //Check if array is null. If so, throw error message
        if(inputArray == null){
            throw new IllegalArgumentException("Array is null.");
        }
    }
}
